// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// cumulativeRows
NumericMatrix cumulativeRows(NumericMatrix M);
RcppExport SEXP _toyepidemic_cumulativeRows(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(cumulativeRows(M));
    return rcpp_result_gen;
END_RCPP
}
// decideEvents
NumericVector decideEvents(NumericVector events, LogicalMatrix probs_random);
RcppExport SEXP _toyepidemic_decideEvents(SEXP eventsSEXP, SEXP probs_randomSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type events(eventsSEXP);
    Rcpp::traits::input_parameter< LogicalMatrix >::type probs_random(probs_randomSEXP);
    rcpp_result_gen = Rcpp::wrap(decideEvents(events, probs_random));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_toyepidemic_cumulativeRows", (DL_FUNC) &_toyepidemic_cumulativeRows, 1},
    {"_toyepidemic_decideEvents", (DL_FUNC) &_toyepidemic_decideEvents, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_toyepidemic(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
